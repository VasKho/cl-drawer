(in-package :cl-drawer)

(defstruct drawable-object
  (points nil :type list)
  (offset-params '(1 1) :type list)
  (max-points 4 :type integer)
  program
  primitive)

(defun draw-object (canvas object)
  (let* ((param-l (gl:get-uniform-location (drawable-object-program object) "param"))
	 (u-resol-location (gl:get-uniform-location (drawable-object-program object) "u_resolution"))
	 (color-uniform-location (gl:get-uniform-location (drawable-object-program object) "vertexColor"))
	 (points (reverse (drawable-object-points object)))
	 (arr (gl:alloc-gl-array :int (length points))))
    (gl:use-program (drawable-object-program object))
    (gl:uniformf color-uniform-location 0 0 0 1)
    (gl:uniformf u-resol-location (first (canvas-size canvas)) (second (canvas-size canvas)))
    (gl:uniformf param-l (nth 0 points) (nth 1 points) (nth 4 points) (nth 5 points))
    (canvas-apply-projection-matrix canvas (drawable-object-program object))
    (canvas-apply-trans-scale-matrix canvas (drawable-object-program object))
    (canvas-apply-x-rot-matrix canvas (drawable-object-program object))
    (canvas-apply-y-rot-matrix canvas (drawable-object-program object))
    (canvas-apply-z-rot-matrix canvas (drawable-object-program object))
    (gl:bind-buffer :array-buffer (canvas-vao canvas))
    (dotimes (i (length points))
      (setf (gl:glaref arr i) (nth i points)))
    (gl:buffer-data :array-buffer :static-draw arr)
    (gl:free-gl-array arr)
    (gl:enable-vertex-attrib-array 0)
    (gl:vertex-attrib-pointer 0 4 :int nil 0 0)
    (loop for i from 0 below (second (drawable-object-offset-params object))
	  by (first (drawable-object-offset-params object)) do
      (gl:draw-arrays (drawable-object-primitive object) i (drawable-object-max-points object)))
    (gl:disable-vertex-attrib-array 0)
    (gl:bind-buffer :array-buffer 0)
    (gl:use-program 0)))
